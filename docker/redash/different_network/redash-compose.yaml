x-redash-service: &redash-service
  image: redash/redash:latest

services:
  #
  # This section shows the services that would run on-prem
  #
  redash:
    <<: *redash-service
    env_file: .env
    restart: always
    command: server
    ports:
      - "5000:5000"
    environment:
      REDASH_WEB_WORKERS: 4
  scheduler:
    <<: *redash-service
    env_file: .env
    restart: always
    command: scheduler
    environment:
      QUEUES: "celery"
      WORKERS_COUNT: 1
  scheduled_worker:
    <<: *redash-service
    env_file: .env
    restart: always
    command: worker
    environment:
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: 1
  adhoc_worker:
    <<: *redash-service
    env_file: .env
    restart: always
    command: worker
    environment:
      QUEUES: "queries"
      WORKERS_COUNT: 2

  nginx:
    image: redash/nginx:latest
    ports:
      - "80:80"
    depends_on:
      - redash
    restart: always

  #
  # I have not experimented with this, but if your cloud instance uses Redis
  # too, you might connect to the cloud Redis instead, so you can mix on-prem
  # and cloud Redash. If you want to be safe (and that is probably better) just
  # run Redis on-prem and a separate one on the cloud.
  #